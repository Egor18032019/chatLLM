{"version":3,"sources":["components/Input/Input.js","components/LoginForm/index.js","components/LoginForm/LoginForm.js","components/Messages/Messages.js","services/chatapi.js","utils/const.js","App.js","utils/common.js","serviceWorker.js","index.js"],"names":["Input","_ref","onSendMessage","_useState","useState","_useState2","_slicedToArray","text","setText","onSubmit","React","createElement","className","TextField","label","placeholder","onChange","e","target","value","margin","onKeyPress","event","key","style","height","width","Button","variant","color","onClick","LoginForm","username","setUsername","handleSubmit","Messages","messages","currentUser","map","msg","message","sender","content","timestamp","date","Date","backgroundColor","getHours","getMinutes","getSeconds","renderMessage","api","Axios","create","baseURL","chatAPI","sendMessage","console","log","post","App","setMessages","_useState3","_useState4","user","setUser","Fragment","SockJsClient","url","topics","onConnect","onDisconnect","onMessage","concat","onMessageReceived","debug","msgText","then","res","catch","err","Math","floor","random","toString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.a83624bd.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst Input = ({ onSendMessage }) => {\r\n    const [text, setText] = useState(\"\")\r\n\r\n    let onChange = (e) => {\r\n        setText(e.target.value)\r\n    }\r\n\r\n    let onSubmit = () => {\r\n        setText(\"\")\r\n        onSendMessage(text);\r\n    }\r\n\r\n    return (\r\n        <div className=\"message-input\">\r\n            <TextField\r\n                className=\"inputField\"\r\n                label=\"Type your message here...\"\r\n                placeholder=\"Enter your message and press ENTER\"\r\n                onChange={e => onChange(e)}\r\n                margin=\"normal\"\r\n                value={text}\r\n                onKeyPress={event => {\r\n                    if (event.key === 'Enter') {\r\n                        onSubmit(text);\r\n                    }\r\n                }}\r\n                style={{ height: \"30px\", width: \"80%\" }}\r\n            />\r\n\r\n            <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\r\n                Send\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Input\r\n","import LoginForm from \"./LoginForm\"\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst LoginForm = ({ onSubmit }) => {\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n    let handleUserNameChange = event => setUsername(event.target.value);\r\n\r\n    let handleSubmit = () => {\r\n        onSubmit(username);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                label=\"Type your username\"\r\n                placeholder=\"Username\"\r\n                onChange={handleUserNameChange}\r\n                margin=\"normal\"\r\n                onKeyPress={event => {\r\n                    if (event.key === 'Enter') {\r\n                        handleSubmit();\r\n                    }\r\n                }}\r\n            />\r\n            <br />\r\n            <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit} >\r\n                Login\r\n             </Button>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm\r\n","import React from 'react'\r\n\r\nconst Messages = ({messages, currentUser}) => {\r\n\r\n    let renderMessage = (message) => {\r\n        const {sender, content, timestamp, color} = message;\r\n         const messageFromMe = currentUser.username === message.sender;\r\n        const className = messageFromMe ? \"Messages-message currentUser\" : \"Messages-message\";\r\n        let date = new Date(timestamp);\r\n        return (\r\n            <li className={className}>\r\n                <span\r\n                    className=\"avatar\"\r\n                    style={{backgroundColor: color}}\r\n                />\r\n                <div className=\"Message-content\">\r\n                    <div className=\"username\">\r\n                        {sender}\r\n                        <span>{\" in \" + date.getHours() + \" : \" + date.getMinutes() + \" : \" + date.getSeconds()}</span>\r\n                    </div>\r\n                    <div className=\"text\">{content}</div>\r\n                </div>\r\n            </li>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <ul className=\"messages-list\">\r\n            {messages.map(msg => renderMessage(msg))}\r\n        </ul>\r\n    )\r\n}\r\n\r\n\r\nexport default Messages","import Axios from \"axios\";\r\nimport {BASE_URL_API, BASE_URL_SEND} from \"../utils/const\";\r\nconst api = Axios.create({\r\n    baseURL: BASE_URL_API\r\n});\r\n\r\nconst chatAPI = {\r\n    // getMessages: (groupId) => {\r\n    //     return api.get(`messages/${groupId}`);\r\n    // },\r\n\r\n    sendMessage: (username, text) => {\r\n        console.log('sendMessage ' + text);\r\n        let msg = {\r\n            sender: username,\r\n            content: text\r\n        }\r\n\r\n        return api.post(BASE_URL_SEND, msg)\r\n    }\r\n}\r\n\r\n\r\nexport default chatAPI;\r\n","const SOCKET_URL = 'http://127.0.0.1:8080/ws-chat/';\r\nconst TOPIC = '/topic/group';\r\nconst BASE_URL_API = \"/api\";\r\nconst BASE_URL_SEND = \"/send\";\r\nexport {\r\n    SOCKET_URL,\r\n    BASE_URL_API,\r\n    BASE_URL_SEND,\r\n    TOPIC\r\n}","import React, {useState} from 'react';\r\nimport SockJsClient from 'react-stomp';\r\nimport './App.css';\r\nimport Input from './components/Input/Input';\r\nimport LoginForm from './components/LoginForm';\r\nimport Messages from './components/Messages/Messages';\r\nimport chatAPI from './services/chatapi';\r\nimport {randomColor} from './utils/common';\r\nimport {SOCKET_URL, TOPIC} from \"./utils/const\";\r\n\r\nconst App = () => {\r\n    const [messages, setMessages] = useState([])\r\n    const [user, setUser] = useState(null)\r\n\r\n    let onConnected = () => {\r\n        console.log(\"Connected on SockJsClient !!! \")\r\n    }\r\n    let onDisconnect = () => {\r\n        console.log(\"Disconnected  !!! \")\r\n    }\r\n    let onMessageReceived = (msg) => {\r\n        console.log('New Message Received!!', msg);\r\n        setMessages(messages.concat(msg));\r\n        console.log(messages)\r\n    }\r\n\r\n    let onSendMessage = (msgText) => {\r\n        chatAPI.sendMessage(user.username, msgText).then(res => {\r\n            console.log('Sent', res);\r\n        }).catch(err => {\r\n            console.log('Error Occurred while sending message to api');\r\n        })\r\n    }\r\n\r\n    let handleLoginSubmit = (username) => {\r\n        console.log(username, \" Logged in..\");\r\n\r\n        setUser({\r\n            username: username,\r\n            color: randomColor()\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {!!user ?\r\n                (\r\n                    <>\r\n                        <SockJsClient\r\n                            url={SOCKET_URL}\r\n                            topics={[TOPIC]}\r\n                            onConnect={onConnected}\r\n                            onDisconnect={onDisconnect}\r\n                            onMessage={msg => onMessageReceived(msg)}\r\n                            debug={false}\r\n                        />\r\n                        <Messages\r\n                            messages={messages}\r\n                            currentUser={user}\r\n                        />\r\n                        <Input onSendMessage={onSendMessage}/>\r\n                    </>\r\n                ) :\r\n                <LoginForm onSubmit={handleLoginSubmit}/>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","export function randomColor() {\r\n    return '#' + Math.floor(Math.random() * 0xFFFFFF).toString(16);\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}